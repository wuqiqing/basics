<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!-- 引入外部属性文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <!-- 第一部分： 连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 第二部分： hibernate常用属性 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        <!-- 第三部分： 引入hbm -->
        <!-- <property name="mappingResources">
            <list>
                <value>cn/itcast/storemanager/domain/Userinfo.hbm.xml</value>
                <value>cn/itcast/storemanager/domain/Store.hbm.xml</value>
                <value>cn/itcast/storemanager/domain/Goods.hbm.xml</value>
                <value>cn/itcast/storemanager/domain/History.hbm.xml</value>
            </list>
        </property> -->
        <!-- 批量引入hbm -->
        <property name="mappingLocations">
            <list>
                <value>classpath:cn/itcast/storemanager/domain/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <!-- 事务管理通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" read-only="false"/>
            <tx:method name="update*" read-only="false"/>
            <tx:method name="delete*" read-only="false"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="login" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 切入点和切面 -->
    <aop:config>
        <aop:pointcut expression="bean(*Service)" id="txPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


    <!-- xml方式:配置缓存
    <cache:advice:是spring帮你实现好的增强类的简化写法
    cache-manager:配置缓存管理器，因为不同的缓存框架拥有不同的缓存策略
    -->
    <!-- <cache:advice id="cacheAdvice" cache-manager="cacheManager">
        具体缓存的业务相关配置 ：对哪些方法进行缓存
        开始缓存配置了：cache：你在ehcache中定义的缓存的名字
        <cache:caching cache="storemanager">
            缓存的方法
            将查询结果放入缓存，第二次再调用该方法时会从缓存查询数据
            <cache:cacheable method="findAllStoreList"/>
            在对仓库进行cud的时候要清除缓存，让再次查询的时候重新加载缓存
            <cache:cache-evict method="save*" all-entries="true"/>
            <cache:cache-evict method="update*" all-entries="true"/>
            <cache:cache-evict method="delete*" all-entries="true"/>
        </cache:caching>
    </cache:advice> -->

    <!-- 定义一个ehcache的spring缓存管理器 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <!-- 注入ehcache的本身缓存 -->
        <property name="cacheManager" ref="ehcacheCacheManager"></property>
    </bean>
    <!-- 定义一个ehcache的具体的缓存 -->
    <bean id="ehcacheCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- 可以省略，默认到classpath下面寻找 ehcache.xml-->
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 缓存aop -->
    <!-- <aop:config>
        <aop:advisor advice-ref="cacheAdvice" pointcut="bean(storeService)"/>
    </aop:config> -->


    <!-- 注解缓存配置 -->
    <!-- 注解缓存驱动配置 -->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <!-- dao层 -->
    <bean id="userDAO" class="cn.itcast.storemanager.dao.GenericDAOImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="storeDAO" class="cn.itcast.storemanager.dao.GenericDAOImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="goodsDAO" class="cn.itcast.storemanager.dao.GenericDAOImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="historyDAO" class="cn.itcast.storemanager.dao.GenericDAOImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- service -->
    <bean id="userService" class="cn.itcast.storemanager.service.UserServiceImpl">
        <property name="userDAO" ref="userDAO"/>
    </bean>
    <bean id="storeService" class="cn.itcast.storemanager.service.StoreServiceImpl">
        <property name="storeDAO" ref="storeDAO"/>
    </bean>
    <bean id="goodsService" class="cn.itcast.storemanager.service.GoodsServiceImpl">
        <property name="goodsDAO" ref="goodsDAO"/>
        <property name="historyDAO" ref="historyDAO"/>
    </bean>

    <!-- action层 -->
    <bean id="userAction" class="cn.itcast.storemanager.web.action.UserAction" scope="prototype">
        <property name="userService" ref="userService"/>
    </bean>
    <bean id="storeAction" class="cn.itcast.storemanager.web.action.StoreAction" scope="prototype">
        <property name="storeService" ref="storeService"/>
    </bean>
    <bean id="goodsAction" class="cn.itcast.storemanager.web.action.GoodsAction" scope="prototype">
        <property name="goodsService" ref="goodsService"/>
    </bean>
</beans>